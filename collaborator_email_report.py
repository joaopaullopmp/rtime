import streamlit as st
import logging
import pandas as pd
import io
import os
import smtplib
import tempfile
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from datetime import datetime, timedelta
import calendar
from fpdf import FPDF
from database_manager import DatabaseManager
from collaborator_targets import CollaboratorTargetCalculator
from report_utils import get_feriados_portugal

# Configura√ß√£o do logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)

def get_available_users(users_df, selected_teams):
    """
    Fun√ß√£o para obter colaboradores dispon√≠veis baseado nas equipes selecionadas
    """
    available_users = []
    
    if "Todas" not in selected_teams:
        # Filtrar usu√°rios pelas equipes selecionadas
        for _, user in users_df.iterrows():
            try:
                if isinstance(user['groups'], str):
                    user_groups = eval(user['groups'])
                else:
                    user_groups = user['groups'] if user['groups'] is not None else []
                
                # Converter para lista se for outro tipo
                if not isinstance(user_groups, list):
                    if isinstance(user_groups, dict):
                        user_groups = list(user_groups.values())
                    else:
                        user_groups = [user_groups]
                
                # Verificar se o usu√°rio pertence a alguma das equipes selecionadas
                if any(team in user_groups for team in selected_teams):
                    available_users.append({
                        'user_id': user['user_id'],
                        'name': f"{user['First_Name']} {user['Last_Name']}",
                        'team': user_groups[0] if user_groups else 'Sem equipe'
                    })
            except Exception as e:
                logging.warning(f"Erro ao processar grupos do usu√°rio {user['First_Name']} {user['Last_Name']}: {str(e)}")
    else:
        # Todos os usu√°rios dispon√≠veis
        for _, user in users_df.iterrows():
            try:
                user_groups = eval(user['groups']) if isinstance(user['groups'], str) else (user['groups'] if user['groups'] is not None else [])
                if not isinstance(user_groups, list):
                    if isinstance(user_groups, dict):
                        user_groups = list(user_groups.values())
                    else:
                        user_groups = [user_groups]
                
                available_users.append({
                    'user_id': user['user_id'],
                    'name': f"{user['First_Name']} {user['Last_Name']}",
                    'team': user_groups[0] if user_groups else 'Sem equipe'
                })
            except Exception as e:
                logging.warning(f"Erro ao processar usu√°rio {user['First_Name']} {user['Last_Name']}: {str(e)}")
    
    return available_users

def collaborator_email_report():
    """
    M√≥dulo para gera√ß√£o e envio de relat√≥rios de indicadores de colaboradores por email
    """
    logging.info("Iniciando a gera√ß√£o do relat√≥rio de indicadores de colaboradores.")
    st.title("üìß Relat√≥rio de Indicadores de Colaboradores")
    
    # Inicializar gerenciadores
    db_manager = DatabaseManager()
    collaborator_target_calculator = CollaboratorTargetCalculator()
    
    # Verificar se o usu√°rio √© administrador
    if st.session_state.user_info['role'].lower() != 'admin':
        st.warning("Esta funcionalidade √© exclusiva para administradores.")
        return
    
    # Carregamento de dados b√°sicos
    try:
        users_df = db_manager.query_to_df("SELECT * FROM utilizadores WHERE active = 1")
        timesheet_df = db_manager.query_to_df("SELECT * FROM timesheet")
        groups_df = db_manager.query_to_df("SELECT * FROM groups WHERE active = 1")
        
        # Converter datas
        timesheet_df['start_date'] = pd.to_datetime(timesheet_df['start_date'], format='mixed', errors='coerce')
        
    except Exception as e:
        st.error(f"Erro ao carregar dados: {str(e)}")
        import traceback
        st.error(traceback.format_exc())
        return
    
    # Interface para configura√ß√£o do relat√≥rio
    st.subheader("Configura√ß√£o do Relat√≥rio")
    
    # SE√á√ÉO 1: Filtros B√°sicos (FORA DO FORMUL√ÅRIO para serem acess√≠veis)
    st.subheader("üîß Filtros B√°sicos")
    
    # Filtros para o relat√≥rio
    col1, col2 = st.columns(2)
    
    with col1:
        # Sele√ß√£o de per√≠odo
        report_period = st.selectbox(
            "Per√≠odo do Relat√≥rio",
            ["M√™s Atual", "M√™s Anterior", "√öltimos 3 Meses", "Ano Atual", "Per√≠odo Personalizado"]
        )
        
        if report_period == "Per√≠odo Personalizado":
            start_date = st.date_input(
                "Data de In√≠cio",
                value=datetime.now().replace(day=1)
            )
            end_date = st.date_input(
                "Data de T√©rmino",
                value=datetime.now()
            )
        else:
            # Definir datas automaticamente conforme o per√≠odo selecionado
            today = datetime.now()
            
            if report_period == "M√™s Atual":
                start_date = today.replace(day=1)
                last_day = calendar.monthrange(today.year, today.month)[1]
                end_date = today.replace(day=last_day)
                
            elif report_period == "M√™s Anterior":
                if today.month == 1:
                    previous_month = 12
                    previous_year = today.year - 1
                else:
                    previous_month = today.month - 1
                    previous_year = today.year
                    
                start_date = datetime(previous_year, previous_month, 1)
                last_day = calendar.monthrange(previous_year, previous_month)[1]
                end_date = datetime(previous_year, previous_month, last_day)
                
            elif report_period == "√öltimos 3 Meses":
                # Calcular 3 meses atr√°s
                if today.month <= 3:
                    months_back = today.month + 12 - 3
                    year_back = today.year - 1
                else:
                    months_back = today.month - 3
                    year_back = today.year
                    
                start_date = datetime(year_back, months_back, 1)
                last_day = calendar.monthrange(today.year, today.month)[1]
                end_date = today.replace(day=last_day)
                
            elif report_period == "Ano Atual":
                start_date = datetime(today.year, 1, 1)
                end_date = datetime(today.year, 12, 31)
    
    with col2:
        # Sele√ß√£o de equipes (m√∫ltipla) - MOVIDO PARA FORA DO FORMUL√ÅRIO
        team_options = ["Todas"] + sorted(groups_df['group_name'].tolist())
        selected_teams = st.multiselect(
            "Equipes", 
            options=team_options,
            default=["Todas"],
            help="Selecione as equipes para filtrar colaboradores"
        )
        
        # Formato do relat√≥rio
        report_format = st.radio(
            "Formato do Relat√≥rio",
            ["PDF", "Excel", "PDF e Excel"]
        )
        
        # Op√ß√µes adicionais
        show_top_performers = st.checkbox("Destacar Top Performers", value=True, 
                                        help="Incluir an√°lise dos colaboradores com melhores indicadores")
        show_low_performers = st.checkbox("Identificar √Åreas de Melhoria", value=True,
                                       help="Incluir an√°lise dos colaboradores abaixo da meta")
    
    # SE√á√ÉO 2: Filtro de Colaboradores com Pondera√ß√£o
    st.subheader("üéØ Filtro de Colaboradores e Pondera√ß√£o")
    
    # Mostrar informa√ß√µes sobre as equipes selecionadas
    teams_info = f"Equipes selecionadas: {', '.join(selected_teams)}"
    st.info(teams_info)
    
    # Checkbox para ativar filtro de colaboradores
    use_collaborator_filter = st.checkbox(
        "üîç Aplicar filtro espec√≠fico de colaboradores",
        value=False,
        help="Ative esta op√ß√£o para selecionar colaboradores espec√≠ficos e aplicar pondera√ß√£o"
    )
    
    # Inicializar vari√°vel para armazenar colaboradores dispon√≠veis
    available_users = []
    collaborator_weights = {}
    
    if use_collaborator_filter:
        # Carregar colaboradores automaticamente baseado nas equipes selecionadas
        # Usar session state para manter os dados carregados
        if 'available_users' not in st.session_state:
            st.session_state.available_users = []
            st.session_state.teams_loaded = []
        
        # Verificar se as equipes mudaram
        teams_changed = st.session_state.teams_loaded != selected_teams
        
        # Bot√£o para carregar/atualizar colaboradores
        col_button, col_auto, col_info = st.columns([1, 1, 2])
        
        with col_button:
            load_collaborators = st.button(
                "üîÑ Carregar Colaboradores",
                help="Clique para carregar os colaboradores das equipes selecionadas"
            )
        
        with col_auto:
            auto_load = st.checkbox(
                "Auto-carregar",
                value=True,
                help="Carregar automaticamente quando as equipes mudarem"
            )
        
        with col_info:
            if teams_changed and auto_load:
                st.info("üîÑ As equipes mudaram - carregando automaticamente...")
            elif teams_changed:
                st.warning("‚ö†Ô∏è As equipes mudaram - clique em 'Carregar Colaboradores'")
            else:
                st.success(f"üìã Equipes atuais: {len(selected_teams)} selecionada(s)")
        
        # Carregar colaboradores quando necess√°rio
        should_load = load_collaborators or (teams_changed and auto_load) or not st.session_state.available_users
        
        if should_load:
            with st.spinner("Carregando colaboradores..."):
                # Carregar colaboradores
                st.session_state.available_users = get_available_users(users_df, selected_teams)
                st.session_state.teams_loaded = selected_teams.copy()
                
                if st.session_state.available_users:
                    st.success(f"‚úÖ {len(st.session_state.available_users)} colaborador(es) carregado(s) das equipes: {', '.join(selected_teams)}")
                else:
                    st.warning("‚ö†Ô∏è Nenhum colaborador encontrado para as equipes selecionadas")
        
        # Usar os colaboradores do session state
        available_users = st.session_state.available_users
        
        # Mostrar informa√ß√µes sobre colaboradores carregados
        if available_users:
            # Agrupar por equipe para mostrar resumo
            teams_summary = {}
            for user in available_users:
                team = user['team']
                if team not in teams_summary:
                    teams_summary[team] = 0
                teams_summary[team] += 1
            
            summary_text = " | ".join([f"{team}: {count}" for team, count in teams_summary.items()])
            st.info(f"üìä Colaboradores por equipe: {summary_text}")
        
        if available_users:
            st.info("Selecione os colaboradores e defina o percentual de pondera√ß√£o para cada um (0-100%)")
            
            # Criar colunas para organizar melhor conforme layout da imagem
            col_left, col_right = st.columns(2)
            
            # Dividir a lista de usu√°rios em duas colunas
            mid_point = len(available_users) // 2
            
            with col_left:
                st.write("**Primeira Metade:**")
                for user in available_users[:mid_point]:
                    # Layout horizontal: checkbox + input de peso
                    cols = st.columns([4, 2])  # Ajustar propor√ß√£o
                    
                    with cols[0]:
                        selected = st.checkbox(
                            f"{user['name']} ({user['team']})",
                            key=f"user_{user['user_id']}"
                        )
                    
                    with cols[1]:
                        if selected:
                            weight = st.number_input(
                                "Peso %",
                                min_value=0,
                                max_value=100,
                                value=100,
                                step=5,
                                key=f"weight_{user['user_id']}",
                                help="Percentual de pondera√ß√£o (0-100%)",
                                label_visibility="collapsed"
                            )
                            collaborator_weights[user['user_id']] = weight / 100.0  # Converter para decimal
                        else:
                            st.text_input("", value="N/A", disabled=True, key=f"disabled_{user['user_id']}", label_visibility="collapsed")
            
            with col_right:
                st.write("**Segunda Metade:**")
                for user in available_users[mid_point:]:
                    # Layout horizontal: checkbox + input de peso
                    cols = st.columns([4, 2])  # Ajustar propor√ß√£o
                    
                    with cols[0]:
                        selected = st.checkbox(
                            f"{user['name']} ({user['team']})",
                            key=f"user_{user['user_id']}_right"
                        )
                    
                    with cols[1]:
                        if selected:
                            weight = st.number_input(
                                "Peso %",
                                min_value=0,
                                max_value=100,
                                value=100,
                                step=5,
                                key=f"weight_{user['user_id']}_right",
                                help="Percentual de pondera√ß√£o (0-100%)",
                                label_visibility="collapsed"
                            )
                            collaborator_weights[user['user_id']] = weight / 100.0  # Converter para decimal
                        else:
                            st.text_input("", value="N/A", disabled=True, key=f"disabled_{user['user_id']}_right", label_visibility="collapsed")
            
            # Mostrar resumo dos colaboradores selecionados
            if collaborator_weights:
                st.success(f"‚úÖ {len(collaborator_weights)} colaborador(es) selecionado(s) com pondera√ß√£o")
                
                # Mostrar resumo em expandir
                with st.expander("Ver resumo dos colaboradores selecionados"):
                    for user in available_users:
                        if user['user_id'] in collaborator_weights:
                            weight_percent = collaborator_weights[user['user_id']] * 100
                            st.write(f"‚Ä¢ {user['name']}: {weight_percent:.0f}%")
            else:
                if use_collaborator_filter:
                    st.warning("‚ö†Ô∏è Nenhum colaborador foi selecionado. O relat√≥rio incluir√° todos os colaboradores das equipes selecionadas.")
        else:
            st.info("Carregue os colaboradores primeiro para poder aplicar filtros espec√≠ficos.")
    
    # SE√á√ÉO 3: Configura√ß√µes de Email (DENTRO DO FORMUL√ÅRIO)
    st.subheader("üìß Configura√ß√µes de Email")
    
    with st.form("email_report_config"):
        # Sele√ß√£o de destinat√°rios
        recipients = st.text_input(
            "Destinat√°rios (separados por v√≠rgula)",
            help="Email dos destinat√°rios separados por v√≠rgula"
        )
        
        # Assunto do email
        subject = st.text_input(
            "Assunto do Email", 
            f"Relat√≥rio de Indicadores de Colaboradores - {datetime.now().strftime('%d/%m/%Y')}"
        )
        
        # Conte√∫do do email
        email_message = st.text_area(
            "Mensagem do Email",
            """Prezados,

Em anexo, relat√≥rio de indicadores de desempenho dos colaboradores.

Atenciosamente,
Equipe de Gest√£o"""
        )
        
        # SMTP settings (collapsed by default)
        with st.expander("Configura√ß√µes de SMTP"):
            smtp_server = st.text_input("Servidor SMTP", "smtp.office365.com")
            smtp_port = st.number_input("Porta SMTP", value=587, step=1)
            smtp_user = st.text_input("Usu√°rio SMTP", "notifications@grupoerre.pt")
            smtp_password = st.text_input("Senha SMTP", type="password", value="erretech@2020")
            use_tls = st.checkbox("Usar TLS", value=True)
        
        # Bot√£o para gerar e enviar o relat√≥rio
        submit_button = st.form_submit_button("Gerar e Enviar Relat√≥rio")
    
    if submit_button:
        # Validar entradas
        if not recipients:
            st.error("Por favor, informe pelo menos um destinat√°rio.")
            return
        
        # Validar se foram selecionados colaboradores quando o filtro est√° ativo
        if use_collaborator_filter and not collaborator_weights:
            st.warning("Filtro de colaboradores est√° ativo mas nenhum colaborador foi selecionado. O relat√≥rio incluir√° todos os colaboradores das equipes selecionadas.")
            use_collaborator_filter = False
        
        with st.spinner("Gerando e enviando relat√≥rio..."):
            # Criar diret√≥rio tempor√°rio para os arquivos
            temp_dir = tempfile.mkdtemp()
            
            # Gerar relat√≥rios conforme formato selecionado
            pdf_path = None
            excel_path = None
            
            if "PDF" in report_format:
                pdf_path = os.path.join(temp_dir, "relatorio_indicadores_colaboradores.pdf")
                pdf_result = generate_collaborator_pdf_report(
                    pdf_path,
                    db_manager,
                    collaborator_target_calculator,
                    start_date,
                    end_date,
                    selected_teams,
                    show_top_performers,
                    show_low_performers,
                    use_collaborator_filter,
                    collaborator_weights
                )
                
                # Verificar se o PDF foi gerado com sucesso
                if not pdf_result or not os.path.exists(pdf_path):
                    st.error(f"Falha ao gerar o PDF. Verifique os logs para mais detalhes.")
                    pdf_path = None

            if "Excel" in report_format:
                excel_path = os.path.join(temp_dir, "relatorio_indicadores_colaboradores.xlsx")
                try:
                    # Obter dados dos colaboradores para o Excel
                    colaboradores = get_collaborator_indicators(
                        db_manager,
                        collaborator_target_calculator,
                        start_date,
                        end_date,
                        selected_teams,
                        use_collaborator_filter,
                        collaborator_weights
                    )
                    
                    excel_result = generate_collaborator_excel_report(
                        excel_path,
                        colaboradores,
                        start_date,
                        end_date,
                        selected_teams,
                        show_top_performers,
                        show_low_performers,
                        use_collaborator_filter,
                        collaborator_weights
                    )
                    
                    if excel_result and os.path.exists(excel_path):
                        st.success("Excel gerado com sucesso!")
                    else:
                        st.error("Falha ao gerar o Excel.")
                        excel_path = None
                except Exception as e:
                    st.error(f"Erro ao gerar Excel: {str(e)}")
                    excel_path = None
            
            # Enviar email com os relat√≥rios gerados se pelo menos um foi gerado com sucesso
            if pdf_path or excel_path:
                email_success = send_email(
                    recipients.split(','), 
                    subject, 
                    email_message, 
                    pdf_path, 
                    excel_path, 
                    smtp_server, 
                    smtp_port, 
                    smtp_user, 
                    smtp_password, 
                    use_tls
                )
                
                # Bot√µes para download local dos relat√≥rios
                st.markdown("### Download dos Relat√≥rios")
                
                if pdf_path and os.path.exists(pdf_path):
                    with open(pdf_path, "rb") as pdf_file:
                        pdf_bytes = pdf_file.read()
                        st.download_button(
                            label="üì• Baixar PDF",
                            data=pdf_bytes,
                            file_name="relatorio_indicadores_colaboradores.pdf",
                            mime="application/pdf"
                        )
                
                if excel_path and os.path.exists(excel_path):
                    with open(excel_path, "rb") as excel_file:
                        excel_bytes = excel_file.read()
                        st.download_button(
                            label="üì• Baixar Excel",
                            data=excel_bytes,
                            file_name="relatorio_indicadores_colaboradores.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
            else:
                st.error("N√£o foi poss√≠vel gerar nenhum dos relat√≥rios. Verifique os logs para mais detalhes.")

# [Manter todas as outras fun√ß√µes existentes inalteradas]
# generate_collaborator_pdf_report, generate_collaborator_excel_report, 
# get_collaborator_indicators, send_email, get_collaborator_absences


def generate_collaborator_pdf_report(
    output_path,
    db_manager,
    collaborator_target_calculator,
    start_date,
    end_date,
    selected_teams,
    show_top_performers=True,
    show_low_performers=True,
    use_collaborator_filter=False,
    collaborator_weights=None
):
    """
    Gera relat√≥rio PDF com indicadores de colaboradores
    """
    logging.info("Iniciando a gera√ß√£o do relat√≥rio PDF.")

    try:
        # Inicializar PDF
        class PDF(FPDF):
            def header(self):
                # Logo apenas na primeira p√°gina
                if self.page_no() != 1:  # N√£o mostrar o logo na primeira p√°gina (capa)
                    if os.path.exists('logo.png'):
                        self.image('logo.png', 10, 8, 33)
                    
                    # T√≠tulo
                    self.set_font('Arial', 'B', 15)
                    self.cell(80)
                    self.cell(30, 25, 'Indicadores de Performance de Colaboradores', 0, 0, 'C')
                    self.ln(20)
            
            def footer(self):
                # Posicionar a 1.5 cm do final
                self.set_y(-15)
                # Fonte Arial it√°lico 8
                self.set_font('Arial', 'I', 8)
                # N√∫mero da p√°gina
                self.cell(0, 10, f'Pagina {self.page_no()}/{{nb}}', 0, 0, 'C')
        
        pdf = PDF()
        pdf.alias_nb_pages()
        
        # Capa do relat√≥rio
        pdf.add_page()

        # Adicionar o logo apenas uma vez
        if os.path.exists('logo.png'):
            pdf.image('logo.png', x=10, y=20, w=60)

        pdf.set_font('Arial', 'B', 20)
        pdf.set_xy(0, 100)
        pdf.cell(210, 20, 'Relatorio - Performance de Colaboradores', 0, 1, 'C')
        
        # Per√≠odo do relat√≥rio
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 15, f"Periodo: {start_date.strftime('%d/%m/%Y')} a {end_date.strftime('%d/%m/%Y')}", 0, 1, 'C')
        
        # Filtros aplicados
        pdf.set_font('Arial', '', 12)
        pdf.ln(10)
        
        teams_str = ', '.join(selected_teams) if "Todas" not in selected_teams else "Todas as equipes"
        
        pdf.set_x(40)
        pdf.cell(0, 8, f"Equipes: {teams_str}", 0, 1)
        
        # Informar se foi aplicado filtro de colaboradores
        if use_collaborator_filter and collaborator_weights:
            pdf.set_x(40)
            pdf.cell(0, 8, f"Colaboradores selecionados: {len(collaborator_weights)}", 0, 1)
            pdf.set_x(40)
            pdf.cell(0, 8, "Aplicada ponderacao personalizada", 0, 1)
        
        # Data de gera√ß√£o
        pdf.set_font('Arial', 'I', 10)
        pdf.set_y(-30)
        pdf.cell(0, 10, f"Gerado automaticamente em {datetime.now().strftime('%d/%m/%Y as %H:%M')}", 0, 1, 'C')
        
        # Obter indicadores de colaboradores
        colaboradores = get_collaborator_indicators(
            db_manager,
            collaborator_target_calculator,
            start_date,
            end_date,
            selected_teams,
            use_collaborator_filter,
            collaborator_weights
        )
        
        if not colaboradores:
            # P√°gina de erro
            pdf.add_page()
            pdf.set_font('Arial', 'B', 16)
            pdf.cell(0, 10, 'Sem Dados Dispon√≠veis', 0, 1, 'C')
            
            pdf.set_font('Arial', '', 12)
            pdf.ln(10)
            pdf.multi_cell(0, 8, "N√£o foram encontrados dados de colaboradores para o per√≠odo e filtros selecionados.")
            
            # Salvar o PDF mesmo assim
            pdf.output(output_path)
            return True
            
        # Converter para DataFrame
        df = pd.DataFrame(colaboradores)
        
        # Resumo executivo
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Resumo Executivo', 0, 1)
        
        # Calcular dias √∫teis do per√≠odo incluindo feriados
        month_year_pairs = set()
        current_date = start_date
        while current_date <= end_date:
            month_year_pairs.add((current_date.month, current_date.year))
            current_date += timedelta(days=1)
            
        # Obter todos os feriados dos anos envolvidos no per√≠odo
        all_holidays = []
        for _, year in month_year_pairs:
            all_holidays.extend(get_feriados_portugal(year))
        
        # Calcular dias √∫teis excluindo feriados
        dias_uteis = 0
        current_date = start_date
        while current_date <= end_date:
            if current_date.weekday() < 5 and current_date.date() not in all_holidays:  # 0-4 s√£o dias √∫teis (seg-sex)
                dias_uteis += 1
            current_date += timedelta(days=1)

        # Calcular horas √∫teis totais para o per√≠odo
        horas_uteis_periodo = dias_uteis * 8
        
        pdf.set_font('Arial', '', 11)
        resumo_text = f"Este relat√≥rio apresenta uma vis√£o consolidada dos indicadores de desempenho dos colaboradores no per√≠odo de {start_date.strftime('%d/%m/%Y')} a {end_date.strftime('%d/%m/%Y')}, cobrindo {dias_uteis} dias √∫teis, j√° exclu√≠dos feriados de Portugal."
        
        if use_collaborator_filter and collaborator_weights:
            resumo_text += f" Foram aplicados fatores de pondera√ß√£o personalizados para {len(collaborator_weights)} colaborador(es) selecionado(s)."
        
        pdf.multi_cell(0, 8, resumo_text)
        
        # Dados resumidos para o sum√°rio (considerar pondera√ß√£o se aplic√°vel)
        if use_collaborator_filter and collaborator_weights:
            # Calcular m√©dias ponderadas CORRETAMENTE
            total_ocupacao_ponderada = sum(row['occupation_percentage'] * row['weight_factor'] for row in colaboradores)
            total_faturabilidade_ponderada = sum(row['billable_percentage'] * row['weight_factor'] for row in colaboradores)
            soma_pesos = sum(row['weight_factor'] for row in colaboradores)
            
            ocupacao_media = total_ocupacao_ponderada / soma_pesos if soma_pesos > 0 else 0
            faturabilidade_media = total_faturabilidade_ponderada / soma_pesos if soma_pesos > 0 else 0
        else:
            ocupacao_media = df['occupation_percentage'].mean()
            faturabilidade_media = df['billable_percentage'].mean()
        
        total_colaboradores = len(df)
        abaixo_meta_ocupacao = sum(df['occupation_percentage'] < 87.5)
        abaixo_meta_faturabilidade = sum(df['billable_percentage'] < 75.0)
        
        # Adicionar tabela de resumo
        pdf.ln(10)
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, "Resumo dos Indicadores:", 0, 1)
        
        # Cabe√ßalho da tabela
        pdf.set_fill_color(31, 119, 180)  # Azul
        pdf.set_text_color(255, 255, 255)  # Branco
        pdf.set_font('Arial', 'B', 10)
        pdf.cell(100, 8, "M√©trica", 1, 0, 'L', True)
        pdf.cell(35, 8, "Valor", 1, 1, 'C', True)
        
        # Dados da tabela com cores alternadas
        pdf.set_text_color(0, 0, 0)  # Preto
        
        # Total de colaboradores
        pdf.set_font('Arial', '', 10)
        pdf.cell(100, 8, "Total de Colaboradores", 1, 0, 'L')
        pdf.cell(35, 8, str(total_colaboradores), 1, 1, 'C')
        
        # Ocupa√ß√£o m√©dia
        pdf.set_fill_color(245, 245, 245)  # Cinza claro
        ocupacao_label = "Ocupa√ß√£o M√©dia (Ponderada)" if use_collaborator_filter and collaborator_weights else "Ocupa√ß√£o M√©dia"
        pdf.cell(100, 8, ocupacao_label, 1, 0, 'L', True)
        pdf.cell(35, 8, f"{ocupacao_media:.1f}%", 1, 1, 'C', True)
        
        # Faturabilidade m√©dia
        faturabilidade_label = "Faturabilidade M√©dia (Ponderada)" if use_collaborator_filter and collaborator_weights else "Faturabilidade M√©dia"
        pdf.cell(100, 8, faturabilidade_label, 1, 0, 'L')
        pdf.cell(35, 8, f"{faturabilidade_media:.1f}%", 1, 1, 'C')
        
        # Colaboradores abaixo da meta de ocupa√ß√£o
        pdf.set_fill_color(245, 245, 245)  # Cinza claro
        pdf.cell(100, 8, "Colaboradores Abaixo da Meta de Ocupa√ß√£o", 1, 0, 'L', True)
        pdf.cell(35, 8, f"{abaixo_meta_ocupacao} ({(abaixo_meta_ocupacao/total_colaboradores*100):.1f}%)", 1, 1, 'C', True)
        
        # Colaboradores abaixo da meta de faturabilidade
        pdf.cell(100, 8, "Colaboradores Abaixo da Meta de Faturabilidade", 1, 0, 'L')
        pdf.cell(35, 8, f"{abaixo_meta_faturabilidade} ({(abaixo_meta_faturabilidade/total_colaboradores*100):.1f}%)", 1, 1, 'C')

        # Top performers (se solicitado)
        if show_top_performers and len(df) > 0:
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.set_fill_color(200, 255, 200)  # Verde claro
            pdf.cell(0, 10, "Top Performers", 0, 1, 'L', True)
            
            # Destacar os 5 melhores em ocupa√ß√£o
            pdf.ln(5)
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Top 5 em Ocupa√ß√£o:", 0, 1)
            
            top_ocupacao = df.sort_values('occupation_percentage', ascending=False).head(5)
            
            # Cabe√ßalho da tabela (incluir pondera√ß√£o se aplic√°vel)
            pdf.set_fill_color(31, 119, 180)  # Azul
            pdf.set_text_color(255, 255, 255)  # Branco
            pdf.set_font('Arial', 'B', 9)
            
            if use_collaborator_filter and collaborator_weights:
                pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
                pdf.cell(25, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                pdf.cell(25, 8, "Faturabilidade", 1, 0, 'C', True)
                pdf.cell(20, 8, "Pondera√ß√£o", 1, 1, 'C', True)
            else:
                pdf.cell(80, 8, "Colaborador", 1, 0, 'L', True)
                pdf.cell(30, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                pdf.cell(30, 8, "Faturabilidade", 1, 1, 'C', True)
            
            # Dados da tabela
            pdf.set_text_color(0, 0, 0)  # Preto
            pdf.set_font('Arial', '', 9)
            
            for idx, row in top_ocupacao.iterrows():
                # Alternar cores de fundo
                if idx % 2 == 0:
                    pdf.set_fill_color(255, 255, 255)  # Branco
                    fill = False
                else:
                    pdf.set_fill_color(245, 245, 245)  # Cinza claro
                    fill = True
                
                if use_collaborator_filter and collaborator_weights:
                    pdf.cell(60, 7, row['name'], 1, 0, 'L', fill)
                    pdf.cell(25, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                    pdf.cell(25, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                    pdf.cell(20, 7, f"{row['weight_percentage']:.0f}%", 1, 1, 'C', fill)
                else:
                    pdf.cell(80, 7, row['name'], 1, 0, 'L', fill)
                    pdf.cell(30, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                    pdf.cell(30, 7, f"{row['billable_percentage']:.1f}%", 1, 1, 'C', fill)
            
            # Destacar os 5 melhores em faturabilidade
            pdf.ln(10)
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Top 5 em Faturabilidade:", 0, 1)
            
            top_faturabilidade = df.sort_values('billable_percentage', ascending=False).head(5)
            
            # Cabe√ßalho da tabela
            pdf.set_fill_color(31, 119, 180)  # Azul
            pdf.set_text_color(255, 255, 255)  # Branco
            pdf.set_font('Arial', 'B', 9)
            
            if use_collaborator_filter and collaborator_weights:
                pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
                pdf.cell(25, 8, "Faturabilidade", 1, 0, 'C', True)
                pdf.cell(25, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                pdf.cell(20, 8, "Pondera√ß√£o", 1, 1, 'C', True)
            else:
                pdf.cell(80, 8, "Colaborador", 1, 0, 'L', True)
                pdf.cell(30, 8, "Faturabilidade", 1, 0, 'C', True)
                pdf.cell(30, 8, "Ocupa√ß√£o", 1, 1, 'C', True)
            
            # Dados da tabela
            pdf.set_text_color(0, 0, 0)  # Preto
            pdf.set_font('Arial', '', 9)
            
            for idx, row in top_faturabilidade.iterrows():
                # Alternar cores de fundo
                if idx % 2 == 0:
                    pdf.set_fill_color(255, 255, 255)  # Branco
                    fill = False
                else:
                    pdf.set_fill_color(245, 245, 245)  # Cinza claro
                    fill = True
                
                if use_collaborator_filter and collaborator_weights:
                    pdf.cell(60, 7, row['name'], 1, 0, 'L', fill)
                    pdf.cell(25, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                    pdf.cell(25, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                    pdf.cell(20, 7, f"{row['weight_percentage']:.0f}%", 1, 1, 'C', fill)
                else:
                    pdf.cell(80, 7, row['name'], 1, 0, 'L', fill)
                    pdf.cell(30, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                    pdf.cell(30, 7, f"{row['occupation_percentage']:.1f}%", 1, 1, 'C', fill)
        
        # √Åreas de melhoria (se solicitado)
        if show_low_performers and len(df) > 0:
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.set_fill_color(255, 230, 230)  # Vermelho claro
            pdf.cell(0, 10, "√Åreas de Melhoria", 0, 1, 'L', True)
            
            # Destacar os colaboradores abaixo da meta de ocupa√ß√£o
            pdf.ln(5)
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Colaboradores Abaixo da Meta de Ocupa√ß√£o:", 0, 1)
            
            below_ocupacao = df[df['occupation_percentage'] < 87.5].sort_values('occupation_percentage')
            
            if not below_ocupacao.empty:
                # Cabe√ßalho da tabela
                pdf.set_fill_color(31, 119, 180)  # Azul
                pdf.set_text_color(255, 255, 255)  # Branco
                pdf.set_font('Arial', 'B', 9)
                
                if use_collaborator_filter and collaborator_weights:
                    pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
                    pdf.cell(25, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                    pdf.cell(25, 8, "Faturabilidade", 1, 0, 'C', True)
                    pdf.cell(20, 8, "Pondera√ß√£o", 1, 1, 'C', True)
                else:
                    pdf.cell(80, 8, "Colaborador", 1, 0, 'L', True)
                    pdf.cell(30, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                    pdf.cell(30, 8, "Faturabilidade", 1, 1, 'C', True)
                
                # Dados da tabela
                pdf.set_text_color(0, 0, 0)  # Preto
                pdf.set_font('Arial', '', 9)
                
                for idx, row in below_ocupacao.iterrows():
                    # Alternar cores de fundo
                    if idx % 2 == 0:
                        pdf.set_fill_color(255, 255, 255)  # Branco
                        fill = False
                    else:
                        pdf.set_fill_color(245, 245, 245)  # Cinza claro
                        fill = True
                    
                    if use_collaborator_filter and collaborator_weights:
                        pdf.cell(60, 7, row['name'], 1, 0, 'L', fill)
                        pdf.cell(25, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                        pdf.cell(25, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                        pdf.cell(20, 7, f"{row['weight_percentage']:.0f}%", 1, 1, 'C', fill)
                    else:
                        pdf.cell(80, 7, row['name'], 1, 0, 'L', fill)
                        pdf.cell(30, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                        pdf.cell(30, 7, f"{row['billable_percentage']:.1f}%", 1, 1, 'C', fill)
            else:
                pdf.cell(0, 8, "Todos os colaboradores atingiram a meta de ocupa√ß√£o!", 0, 1)
            
            # Destacar os colaboradores abaixo da meta de faturabilidade
            pdf.ln(10)
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Colaboradores Abaixo da Meta de Faturabilidade:", 0, 1)
            
            below_faturabilidade = df[df['billable_percentage'] < 75.0].sort_values('billable_percentage')
            
            if not below_faturabilidade.empty:
                # Cabe√ßalho da tabela
                pdf.set_fill_color(31, 119, 180)  # Azul
                pdf.set_text_color(255, 255, 255)  # Branco
                pdf.set_font('Arial', 'B', 9)
                
                if use_collaborator_filter and collaborator_weights:
                    pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
                    pdf.cell(25, 8, "Faturabilidade", 1, 0, 'C', True)
                    pdf.cell(25, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                    pdf.cell(20, 8, "Pondera√ß√£o", 1, 1, 'C', True)
                else:
                    pdf.cell(80, 8, "Colaborador", 1, 0, 'L', True)
                    pdf.cell(30, 8, "Faturabilidade", 1, 0, 'C', True)
                    pdf.cell(30, 8, "Ocupa√ß√£o", 1, 1, 'C', True)
                
                # Dados da tabela
                pdf.set_text_color(0, 0, 0)  # Preto
                pdf.set_font('Arial', '', 9)
                
                for idx, row in below_faturabilidade.iterrows():
                    # Alternar cores de fundo
                    if idx % 2 == 0:
                        pdf.set_fill_color(255, 255, 255)  # Branco
                        fill = False
                    else:
                        pdf.set_fill_color(245, 245, 245)  # Cinza claro
                        fill = True
                    
                    if use_collaborator_filter and collaborator_weights:
                        pdf.cell(60, 7, row['name'], 1, 0, 'L', fill)
                        pdf.cell(25, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                        pdf.cell(25, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                        pdf.cell(20, 7, f"{row['weight_percentage']:.0f}%", 1, 1, 'C', fill)
                    else:
                        pdf.cell(80, 7, row['name'], 1, 0, 'L', fill)
                        pdf.cell(30, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                        pdf.cell(30, 7, f"{row['occupation_percentage']:.1f}%", 1, 1, 'C', fill)
            else:
                pdf.cell(0, 8, "Todos os colaboradores atingiram a meta de faturabilidade!", 0, 1)
        
        # Tabela completa dos colaboradores
        pdf.add_page()
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, "Tabela Completa de Indicadores", 0, 1)
        
        # Ordenar alfabeticamente pelo nome para a tabela completa
        df_complete = df.sort_values('name')
        
        # Cabe√ßalho da tabela (ajustar com base se h√° pondera√ß√£o)
        pdf.set_fill_color(31, 119, 180)  # Azul
        pdf.set_text_color(255, 255, 255)  # Branco
        pdf.set_font('Arial', 'B', 8)
        
        if use_collaborator_filter and collaborator_weights:
            pdf.cell(50, 8, "Colaborador", 1, 0, 'L', True)
            pdf.cell(18, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
            pdf.cell(15, 8, "Meta", 1, 0, 'C', True)
            pdf.cell(18, 8, "Faturabilidade", 1, 0, 'C', True)
            pdf.cell(15, 8, "Meta", 1, 0, 'C', True)
            pdf.cell(18, 8, "Horas Real.", 1, 0, 'C', True)
            pdf.cell(15, 8, "Pond.", 1, 1, 'C', True)
        else:
            pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
            pdf.cell(20, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
            pdf.cell(20, 8, "Meta Ocup.", 1, 0, 'C', True)
            pdf.cell(20, 8, "Faturabilidade", 1, 0, 'C', True)
            pdf.cell(20, 8, "Meta Fatur.", 1, 0, 'C', True)
            pdf.cell(20, 8, "Horas Realiz.", 1, 1, 'C', True)

        # Dados da tabela
        pdf.set_text_color(0, 0, 0)  # Preto
        pdf.set_font('Arial', '', 7)

        for idx, row in df_complete.iterrows():
            # Verificar se precisamos de nova p√°gina
            if pdf.get_y() > 270:
                pdf.add_page()
                
                # Repetir cabe√ßalho
                pdf.set_fill_color(31, 119, 180)  # Azul
                pdf.set_text_color(255, 255, 255)  # Branco
                pdf.set_font('Arial', 'B', 8)
                
                if use_collaborator_filter and collaborator_weights:
                    pdf.cell(50, 8, "Colaborador", 1, 0, 'L', True)
                    pdf.cell(18, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                    pdf.cell(15, 8, "Meta", 1, 0, 'C', True)
                    pdf.cell(18, 8, "Faturabilidade", 1, 0, 'C', True)
                    pdf.cell(15, 8, "Meta", 1, 0, 'C', True)
                    pdf.cell(18, 8, "Horas Real.", 1, 0, 'C', True)
                    pdf.cell(15, 8, "Pond.", 1, 1, 'C', True)
                else:
                    pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
                    pdf.cell(20, 8, "Ocupa√ß√£o", 1, 0, 'C', True)
                    pdf.cell(20, 8, "Meta Ocup.", 1, 0, 'C', True)
                    pdf.cell(20, 8, "Faturabilidade", 1, 0, 'C', True)
                    pdf.cell(20, 8, "Meta Fatur.", 1, 0, 'C', True)
                    pdf.cell(20, 8, "Horas Realiz.", 1, 1, 'C', True)
                
                pdf.set_text_color(0, 0, 0)  # Preto
                pdf.set_font('Arial', '', 7)
                
            # Alternar cores de fundo
            if idx % 2 == 0:
                pdf.set_fill_color(245, 245, 245)  # Cinza claro
                fill = True
            else:
                pdf.set_fill_color(255, 255, 255)  # Branco
                fill = False
            
            # Truncar nome se muito longo
            name = row['name']
            if len(name) > 25:
                name = name[:22] + "..."
                
            if use_collaborator_filter and collaborator_weights:
                pdf.cell(50, 7, name, 1, 0, 'L', fill)
                
                # Ocupa√ß√£o com cor se estiver abaixo da meta
                if row['occupation_percentage'] < 87.5:
                    pdf.set_text_color(255, 0, 0)  # Vermelho
                pdf.cell(18, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                pdf.set_text_color(0, 0, 0)  # Voltar para preto
                
                pdf.cell(15, 7, "87.5%", 1, 0, 'C', fill)
                
                # Faturabilidade com cor se estiver abaixo da meta
                if row['billable_percentage'] < 75.0:
                    pdf.set_text_color(255, 0, 0)  # Vermelho
                pdf.cell(18, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                pdf.set_text_color(0, 0, 0)  # Voltar para preto
                
                pdf.cell(15, 7, "75.0%", 1, 0, 'C', fill)
                pdf.cell(18, 7, f"{row['total_hours']:.1f}h", 1, 0, 'C', fill)
                pdf.cell(15, 7, f"{row['weight_percentage']:.0f}%", 1, 1, 'C', fill)
            else:
                pdf.cell(60, 7, name, 1, 0, 'L', fill)
                
                # Ocupa√ß√£o with color if below target
                if row['occupation_percentage'] < 87.5:
                    pdf.set_text_color(255, 0, 0)  # Vermelho
                pdf.cell(20, 7, f"{row['occupation_percentage']:.1f}%", 1, 0, 'C', fill)
                pdf.set_text_color(0, 0, 0)  # Voltar para preto
                
                pdf.cell(20, 7, "87.5%", 1, 0, 'C', fill)
                
                # Faturabilidade with color if below target
                if row['billable_percentage'] < 75.0:
                    pdf.set_text_color(255, 0, 0)  # Vermelho
                pdf.cell(20, 7, f"{row['billable_percentage']:.1f}%", 1, 0, 'C', fill)
                pdf.set_text_color(0, 0, 0)  # Voltar para preto
                
                pdf.cell(20, 7, "75.0%", 1, 0, 'C', fill)
                pdf.cell(20, 7, f"{row['total_hours']:.1f}h", 1, 1, 'C', fill)

        pdf.ln(5)
        pdf.set_font('Arial', 'B', 10)
        pdf.cell(0, 8, f"Horas √∫teis no per√≠odo: {horas_uteis_periodo:.1f}h ({dias_uteis} dias √∫teis √ó 8h)", 0, 1)

        # Legenda
        pdf.ln(5)
        pdf.set_font('Arial', 'B', 10)
        pdf.cell(0, 8, "Legenda:", 0, 1)
        
        pdf.set_font('Arial', '', 10)
        pdf.set_fill_color(76, 175, 80)  # Verde
        pdf.rect(20, pdf.get_y(), 5, 5, 'F')
        pdf.set_xy(30, pdf.get_y())
        pdf.cell(100, 5, "Acima da meta", 0, 1)
        
        pdf.set_fill_color(244, 67, 54)  # Vermelho
        pdf.rect(20, pdf.get_y(), 5, 5, 'F')
        pdf.set_xy(30, pdf.get_y())
        pdf.cell(100, 5, "Abaixo da meta", 0, 1)
        
        pdf.ln(3)
        legend_text = "Meta de Ocupa√ß√£o: 87.5% | Meta de Faturabilidade: 75%"
        if use_collaborator_filter and collaborator_weights:
            legend_text += " | Pond. = Pondera√ß√£o aplicada"
        pdf.cell(0, 5, legend_text, 0, 1)
        
        logging.info("Finalizando a gera√ß√£o do PDF.")

        # Obter aus√™ncias para o per√≠odo
        ausencias = get_collaborator_absences(
            db_manager,
            start_date,
            end_date,
            selected_teams
        )

        # Adicionar se√ß√£o de aus√™ncias ao PDF
        if ausencias:
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, "Aus√™ncias no Per√≠odo", 0, 1)
            
            # Cabe√ßalho da tabela
            pdf.set_fill_color(31, 119, 180)  # Azul
            pdf.set_text_color(255, 255, 255)  # Branco
            pdf.set_font('Arial', 'B', 10)
            pdf.cell(60, 8, "Colaborador", 1, 0, 'L', True)
            pdf.cell(25, 8, "In√≠cio", 1, 0, 'C', True)
            pdf.cell(25, 8, "Fim", 1, 0, 'C', True)
            pdf.cell(30, 8, "Tipo", 1, 0, 'C', True)
            pdf.cell(15, 8, "Dias", 1, 0, 'C', True)
            pdf.cell(35, 8, "Observa√ß√£o", 1, 1, 'C', True)
            
            # Dados da tabela
            pdf.set_text_color(0, 0, 0)  # Preto
            pdf.set_font('Arial', '', 9)
            
            for idx, ausencia in enumerate(ausencias):
                # Alternar cores de fundo
                if idx % 2 == 0:
                    pdf.set_fill_color(245, 245, 245)  # Cinza claro
                    fill = True
                else:
                    pdf.set_fill_color(255, 255, 255)  # Branco
                    fill = False
                    
                pdf.cell(60, 7, ausencia['user_name'], 1, 0, 'L', fill)
                pdf.cell(25, 7, ausencia['start_date'].strftime('%d/%m/%Y'), 1, 0, 'C', fill)
                pdf.cell(25, 7, ausencia['end_date'].strftime('%d/%m/%Y'), 1, 0, 'C', fill)
                pdf.cell(30, 7, ausencia['absence_type'], 1, 0, 'C', fill)
                pdf.cell(15, 7, str(ausencia['duration_days']), 1, 0, 'C', fill)
                
                # Limitar tamanho da descri√ß√£o
                descricao = ausencia['description']
                if descricao and len(descricao) > 20:
                    descricao = descricao[:17] + "..."
                pdf.cell(35, 7, descricao, 1, 1, 'L', fill)
            
            # Adicionar resumo de aus√™ncias
            pdf.ln(5)
            pdf.set_font('Arial', 'B', 11)
            pdf.cell(0, 8, "Resumo de Aus√™ncias:", 0, 1)
            
            # Contagem por tipo de aus√™ncia
            tipos_ausencia = {}
            for ausencia in ausencias:
                tipo = ausencia['absence_type']
                if tipo not in tipos_ausencia:
                    tipos_ausencia[tipo] = 0
                tipos_ausencia[tipo] += 1
            
            pdf.set_font('Arial', '', 10)
            for tipo, contagem in tipos_ausencia.items():
                pdf.cell(0, 6, f"- {tipo}: {contagem} ocorr√™ncia(s)", 0, 1)
            
            # Total de dias de aus√™ncia
            total_dias = sum(ausencia['duration_days'] for ausencia in ausencias)
            pdf.ln(2)
            pdf.cell(0, 6, f"Total de dias de aus√™ncia no per√≠odo: {total_dias} dias", 0, 1)
        
        # Informa√ß√µes sobre feriados considerados
        pdf.ln(5)
        pdf.set_font('Arial', 'B', 10)
        pdf.cell(0, 8, "Feriados Considerados no Per√≠odo:", 0, 1)
        pdf.set_font('Arial', '', 9)
        
        # Listar os feriados do per√≠odo
        feriados_no_periodo = [feriado for feriado in all_holidays if start_date.date() <= feriado <= end_date.date()]
        if feriados_no_periodo:
            for feriado in feriados_no_periodo:
                pdf.cell(0, 5, f"- {feriado.strftime('%d/%m/%Y')}", 0, 1)
        else:
            pdf.cell(0, 5, "Nenhum feriado no per√≠odo selecionado.", 0, 1)
        
        # Salvar o PDF
        pdf.output(output_path)
        logging.info("PDF gerado com sucesso.")
        
        return True
    
    except Exception as e:
        import traceback
        error_msg = f"Erro ao gerar PDF: {str(e)}"
        logging.error(error_msg)
        logging.error(traceback.format_exc())
        return False


def generate_collaborator_excel_report(
    output_path,
    colaboradores,
    start_date,
    end_date,
    selected_teams,
    show_top_performers=True,
    show_low_performers=True,
    use_collaborator_filter=False,
    collaborator_weights=None
):
    """
    Gera relat√≥rio Excel com indicadores de colaboradores
    """
    try:
        # Verificar se os colaboradores existem
        if not colaboradores:
            # Sem dados dispon√≠veis
            return False
        
        # Converter para DataFrame
        df = pd.DataFrame(colaboradores)
        
        # [Continue with existing Excel generation logic, adding weight information where applicable]
        
        return True
    
    except Exception as e:
        import traceback
        error_msg = f"Erro ao gerar Excel: {str(e)}"
        logging.error(error_msg)
        logging.error(traceback.format_exc())
        return False


def get_collaborator_indicators(
    db_manager,
    collaborator_target_calculator,
    start_date,
    end_date,
    selected_teams,
    use_collaborator_filter=False,
    collaborator_weights=None
):
    """
    Obter indicadores de colaboradores para o relat√≥rio
    """
    try:
        # Carregar dados necess√°rios usando formato ISO para as datas
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = end_date.strftime('%Y-%m-%d 23:59:59')  # Adicionar o hor√°rio final do dia
                
        # Usar consulta SQL que inclua registros at√© o final do √∫ltimo dia
        timesheet_df = db_manager.query_to_df(f"SELECT * FROM timesheet WHERE datetime(start_date) >= '{start_date_str}' AND datetime(end_date) <= '{end_date_str}'")

        # Adicionar log para depura√ß√£o espec√≠fica do per√≠odo
        logging.info(f"Per√≠odo de consulta: de {start_date_str} at√© {end_date_str}")
        users_df = db_manager.query_to_df("SELECT * FROM utilizadores WHERE active = 1")
        groups_df = db_manager.query_to_df("SELECT * FROM groups")
        
        # Filtrar por equipe
        if "Todas" not in selected_teams:
            # Encontrar os usu√°rios que pertencem √†s equipes selecionadas
            filtered_users = []
            for _, user in users_df.iterrows():
                try:
                    if isinstance(user['groups'], str):
                        user_groups = eval(user['groups'])
                    else:
                        user_groups = user['groups'] if user['groups'] is not None else []
                    
                    # Converter para lista se for outro tipo
                    if not isinstance(user_groups, list):
                        if isinstance(user_groups, dict):
                            user_groups = list(user_groups.values())
                        else:
                            user_groups = [user_groups]
                    
                    # Verificar se o usu√°rio pertence a alguma das equipes selecionadas
                    if any(team in user_groups for team in selected_teams):
                        filtered_users.append(user['user_id'])
                except Exception as e:
                    logging.warning(f"Erro ao processar grupos do usu√°rio {user['First_Name']} {user['Last_Name']}: {str(e)}")
            
            # Filtrar usu√°rios
            users_df = users_df[users_df['user_id'].isin(filtered_users)]
        
        # Aplicar filtro espec√≠fico de colaboradores se ativo
        if use_collaborator_filter and collaborator_weights:
            selected_user_ids = list(collaborator_weights.keys())
            users_df = users_df[users_df['user_id'].isin(selected_user_ids)]
            logging.info(f"Filtro de colaboradores aplicado: {len(selected_user_ids)} colaboradores selecionados")
        
        if users_df.empty:
            return []
        
        # Calculando dias √∫teis do per√≠odo considerando feriados
        month_year_pairs = set()
        current_date = start_date
        while current_date <= end_date:
            month_year_pairs.add((current_date.month, current_date.year))
            current_date += timedelta(days=1)
            
        # Obter todos os feriados dos anos envolvidos no per√≠odo
        all_holidays = []
        for month, year in month_year_pairs:
            all_holidays.extend(get_feriados_portugal(year))
        
        # Calcular dias √∫teis excluindo feriados
        dias_uteis = 0
        current_date = start_date
        while current_date <= end_date:
            if current_date.weekday() < 5 and current_date.date() not in all_holidays:  # 0-4 s√£o dias √∫teis (seg-sex)
                dias_uteis += 1
            current_date += timedelta(days=1)
                
        # Calcular horas √∫teis totais para o per√≠odo
        horas_uteis_periodo = dias_uteis * 8
        
        # Para cada colaborador, calcular indicadores
        collaborator_indicators = []
        
        for _, user in users_df.iterrows():
            # Filtrar entradas de timesheet para o colaborador e per√≠odo espec√≠fico
            try:
                user_timesheet = timesheet_df[
                    (timesheet_df['user_id'] == user['user_id']) & 
                    (pd.to_datetime(timesheet_df['start_date'], format='mixed') >= start_date_str) &
                    (pd.to_datetime(timesheet_df['start_date'], format='mixed') <= end_date_str)
                ]
            except Exception as e:
                # Fallback em caso de erro de convers√£o de data
                logging.warning(f"Erro ao filtrar timesheet para {user['First_Name']} {user['Last_Name']}: {e}")
                user_timesheet = pd.DataFrame()
            
            # Calcular horas realizadas (total de horas registradas)
            total_hours = user_timesheet['hours'].sum() if not user_timesheet.empty else 0
            logging.info(f"Total de Horas para {user['First_Name']} {user['Last_Name']}: {total_hours}")
            
            # Calcular horas fatur√°veis (apenas entradas marcadas como billable=True)
            billable_hours = user_timesheet[user_timesheet['billable'] == True]['hours'].sum() if not user_timesheet.empty else 0
            
            # Obter fator de pondera√ß√£o se aplic√°vel
            weight_factor = 1.0  # Default
            if use_collaborator_filter and collaborator_weights and user['user_id'] in collaborator_weights:
                weight_factor = collaborator_weights[user['user_id']]
            
            # Aplicar pondera√ß√£o √†s horas para c√°lculo dos percentuais
            weighted_total_hours = total_hours * weight_factor
            weighted_billable_hours = billable_hours * weight_factor
            
            # Calcular percentuais de ocupa√ß√£o e faturabilidade (sem pondera√ß√£o individual)
            # Ocupa√ß√£o = (Horas realizadas / Horas √∫teis do per√≠odo) * 100
            occupation_percentage = (total_hours / horas_uteis_periodo * 100) if horas_uteis_periodo > 0 else 0

            # Faturabilidade = (Horas fatur√°veis / Horas √∫teis do per√≠odo) * 100
            billable_percentage = (billable_hours / horas_uteis_periodo * 100) if horas_uteis_periodo > 0 else 0
            
            # Metas definidas
            target_occupation = 87.5  # Meta de ocupa√ß√£o (87,5%)
            target_billable = 75.0    # Meta de horas fatur√°veis (75.0%)
            
            # Determinar cores dos indicadores - simplificado para verde/vermelho
            occupation_color = "green" if occupation_percentage >= target_occupation else "red"
            billable_color = "green" if billable_percentage >= target_billable else "red"
            
            # Adicionar ao array de indicadores
            collaborator_indicators.append({
                "user_id": user['user_id'],
                "name": f"{user['First_Name']} {user['Last_Name']}",
                "occupation_percentage": occupation_percentage,
                "billable_percentage": billable_percentage,
                "occupation_color": occupation_color,
                "billable_color": billable_color,
                "target_occupation": target_occupation,
                "target_billable": target_billable,
                "total_hours": total_hours,  # Quantidade de horas realizadas (original)
                "billable_hours": billable_hours,  # Quantidade de horas fatur√°veis (original)
                "weighted_total_hours": weighted_total_hours,  # Horas ponderadas
                "weighted_billable_hours": weighted_billable_hours,  # Horas fatur√°veis ponderadas
                "weight_factor": weight_factor,  # Fator de pondera√ß√£o aplicado
                "weight_percentage": weight_factor * 100  # Percentual de pondera√ß√£o para exibi√ß√£o
            })
        
        return collaborator_indicators
    
    except Exception as e:
        import traceback
        logging.error(f"Erro ao obter indicadores de colaboradores: {str(e)}")
        logging.error(traceback.format_exc())
        return []


def send_email(
    recipients, 
    subject, 
    message, 
    pdf_path, 
    excel_path, 
    smtp_server, 
    smtp_port, 
    smtp_user, 
    smtp_password, 
    use_tls
):
    """
    Envia email com os relat√≥rios anexados
    """
    try:
        # Criar email MIME
        msg = MIMEMultipart()
        msg['From'] = smtp_user
        msg['To'] = ", ".join(recipients)
        msg['Subject'] = subject
        
        # Adicionar corpo do email
        msg.attach(MIMEText(message, 'plain'))
        
        # Verificar se os arquivos existem antes de anexar
        has_attachments = False
        
        # Anexar PDF se existir
        if pdf_path and os.path.exists(pdf_path):
            with open(pdf_path, "rb") as pdf_file:
                attachment = MIMEApplication(pdf_file.read(), _subtype="pdf")
                attachment.add_header(
                    'Content-Disposition', 
                    'attachment', 
                    filename=os.path.basename(pdf_path)
                )
                msg.attach(attachment)
                has_attachments = True
                st.success(f"PDF anexado ao email.")
        else:
            st.warning(f"Arquivo PDF n√£o encontrado em {pdf_path}")
        
        # Anexar Excel se existir
        if excel_path and os.path.exists(excel_path):
            with open(excel_path, "rb") as excel_file:
                attachment = MIMEApplication(excel_file.read(), _subtype="vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                attachment.add_header(
                    'Content-Disposition', 
                    'attachment', 
                    filename=os.path.basename(excel_path)
                )
                msg.attach(attachment)
                has_attachments = True
                st.success(f"Excel anexado ao email.")
        else:
            st.warning(f"Arquivo Excel n√£o encontrado em {excel_path}")
            
        if not has_attachments:
            st.error("Nenhum anexo dispon√≠vel para enviar. Verifique se os relat√≥rios foram gerados corretamente.")
            return False
        
        # Configurar e enviar email
        server = smtplib.SMTP(smtp_server, smtp_port)
        
        if use_tls:
            server.starttls()
        
        if smtp_user and smtp_password:
            server.login(smtp_user, smtp_password)
        
        server.send_message(msg)
        server.quit()
        
        st.success(f"Email enviado com sucesso para {', '.join(recipients)}!")
        return True
    except Exception as e:
        import traceback
        error_msg = f"Erro ao enviar email: {str(e)}"
        logging.error(error_msg)
        logging.error(traceback.format_exc())
        st.error(error_msg)
        return False


def get_collaborator_absences(db_manager, start_date, end_date, selected_teams):
    """
    Obt√©m aus√™ncias de colaboradores para o per√≠odo selecionado
    """
    try:
        # Carregar dados necess√°rios
        absences_df = db_manager.query_to_df("SELECT * FROM absences")
        users_df = db_manager.query_to_df("SELECT * FROM utilizadores WHERE active = 1")
        groups_df = db_manager.query_to_df("SELECT * FROM groups")
        
        # Verificar se h√° dados
        if absences_df.empty:
            return []
        
        # Converter datas para datetime
        absences_df['start_date'] = pd.to_datetime(absences_df['start_date'], errors='coerce')
        absences_df['end_date'] = pd.to_datetime(absences_df['end_date'], errors='coerce')
        
        # Filtrar aus√™ncias no per√≠odo
        filtered_absences = absences_df[
            ((absences_df['start_date'] >= start_date) & (absences_df['start_date'] <= end_date)) |
            ((absences_df['end_date'] >= start_date) & (absences_df['end_date'] <= end_date)) |
            ((absences_df['start_date'] <= start_date) & (absences_df['end_date'] >= end_date))
        ]
        
        if filtered_absences.empty:
            return []
        
        # Filtrar por equipe se necess√°rio
        if "Todas" not in selected_teams:
            # Encontrar os usu√°rios que pertencem √†s equipes selecionadas
            filtered_users = []
            for _, user in users_df.iterrows():
                try:
                    if isinstance(user['groups'], str):
                        user_groups = eval(user['groups'])
                    else:
                        user_groups = user['groups'] if user['groups'] is not None else []
                    
                    # Converter para lista se for outro tipo
                    if not isinstance(user_groups, list):
                        if isinstance(user_groups, dict):
                            user_groups = list(user_groups.values())
                        else:
                            user_groups = [user_groups]
                    
                    # Verificar se o usu√°rio pertence a alguma das equipes selecionadas
                    if any(team in user_groups for team in selected_teams):
                        filtered_users.append(user['user_id'])
                except Exception as e:
                    logging.warning(f"Erro ao processar grupos do usu√°rio {user['First_Name']} {user['Last_Name']}: {str(e)}")
            
            # Filtrar aus√™ncias pelos usu√°rios das equipes selecionadas
            filtered_absences = filtered_absences[filtered_absences['user_id'].isin(filtered_users)]
        
        # Preparar lista de aus√™ncias
        absence_list = []
        
        for _, absence in filtered_absences.iterrows():
            user_id = absence['user_id']
            user_info = users_df[users_df['user_id'] == user_id]
            
            if user_info.empty:
                continue
                
            user_name = f"{user_info['First_Name'].iloc[0]} {user_info['Last_Name'].iloc[0]}"
            
            # Ajustar datas para ficarem dentro do per√≠odo selecionado
            start_date_adj = max(absence['start_date'], start_date)
            end_date_adj = min(absence['end_date'], end_date)
            
            # Verificar tipo de aus√™ncia
            absence_type = str(absence.get('absence_type', 'Outro'))
            if pd.isna(absence_type):
                absence_type = 'Outro'
            
            # Calcular dura√ß√£o em dias
            duration_days = (end_date_adj - start_date_adj).days + 1
            
            absence_list.append({
                'user_id': user_id,
                'user_name': user_name,
                'start_date': start_date_adj,
                'end_date': end_date_adj,
                'duration_days': duration_days,
                'absence_type': absence_type,
                'description': absence.get('description', '')
            })
        
        return absence_list
    
    except Exception as e:
        import traceback
        logging.error(f"Erro ao obter aus√™ncias de colaboradores: {str(e)}")
        logging.error(traceback.format_exc())
        return []
def generate_collaborator_excel_report(
    output_path,
    colaboradores,
    start_date,
    end_date,
    selected_teams,
    show_top_performers=True,
    show_low_performers=True,
    use_collaborator_filter=False,
    collaborator_weights=None
):
    """
    Gera relat√≥rio Excel com indicadores de colaboradores
    """
    try:
        # Verificar se os colaboradores existem
        if not colaboradores:
            # Sem dados dispon√≠veis
            return False
        
        # Converter para DataFrame
        df = pd.DataFrame(colaboradores)
        
        # Calcular dias √∫teis considerando feriados
        month_year_pairs = set()
        current_date = start_date
        while current_date <= end_date:
            month_year_pairs.add((current_date.month, current_date.year))
            current_date += timedelta(days=1)
            
        # Obter todos os feriados dos anos envolvidos no per√≠odo
        all_holidays = []
        for _, year in month_year_pairs:
            all_holidays.extend(get_feriados_portugal(year))
        
        # Calcular dias √∫teis excluindo feriados
        dias_uteis = 0
        current_date = start_date
        while current_date <= end_date:
            if current_date.weekday() < 5 and current_date.date() not in all_holidays:
                dias_uteis += 1
            current_date += timedelta(days=1)
        
        # Preparar dados para o Excel
        resumo_data = {
            'M√©trica': [
                'Per√≠odo',
                'Dias √öteis',
                'Total de Colaboradores',
                'Ocupa√ß√£o M√©dia (%)',
                'Faturabilidade M√©dia (%)',
                'Colaboradores Abaixo da Meta de Ocupa√ß√£o',
                'Colaboradores Abaixo da Meta de Faturabilidade',
                'Percentual Abaixo da Meta de Ocupa√ß√£o',
                'Percentual Abaixo da Meta de Faturabilidade',
                'Data de Gera√ß√£o'
            ],
            'Valor': [
                f"{start_date.strftime('%d/%m/%Y')} a {end_date.strftime('%d/%m/%Y')}",
                dias_uteis,
                len(df),
                df['occupation_percentage'].mean(),
                df['billable_percentage'].mean(),
                sum(df['occupation_percentage'] < 87.5),
                sum(df['billable_percentage'] < 75.0),
                f"{(sum(df['occupation_percentage'] < 87.5) / len(df) * 100):.1f}%",
                f"{(sum(df['billable_percentage'] < 75.0) / len(df) * 100):.1f}%",
                datetime.now().strftime('%d/%m/%Y %H:%M:%S')
            ]
        }
        
        # Adicionar informa√ß√£o sobre pondera√ß√£o se aplic√°vel
        if use_collaborator_filter and collaborator_weights:
            resumo_data['M√©trica'].extend([
                'Filtro de Colaboradores Aplicado',
                'N√∫mero de Colaboradores Selecionados',
                'Pondera√ß√£o Personalizada'
            ])
            resumo_data['Valor'].extend([
                'Sim',
                len(collaborator_weights),
                'Aplicada'
            ])
        
        # Filtros aplicados
        teams_str = ', '.join(selected_teams) if "Todas" not in selected_teams else "Todas as equipes"
        filtros_data = {
            'Filtro': ['Equipes'],
            'Valor': [teams_str]
        }
        
        # Planilha principal - dados completos
        # Selecionar e renomear colunas baseado se h√° pondera√ß√£o
        if use_collaborator_filter and collaborator_weights:
            main_data = df[[
                'name',
                'occupation_percentage',
                'billable_percentage',
                'total_hours',
                'billable_hours',
                'weight_percentage'
            ]].copy()
            
            main_data.columns = [
                'Colaborador',
                'Ocupa√ß√£o (%)',
                'Faturabilidade (%)',
                'Horas Totais',
                'Horas Fatur√°veis',
                'Pondera√ß√£o (%)'
            ]
        else:
            main_data = df[[
                'name',
                'occupation_percentage',
                'billable_percentage',
                'total_hours',
                'billable_hours'
            ]].copy()
            
            main_data.columns = [
                'Colaborador',
                'Ocupa√ß√£o (%)',
                'Faturabilidade (%)',
                'Horas Totais',
                'Horas Fatur√°veis'
            ]
        
        # Adicionar colunas de status
        main_data['Atinge Meta Ocupa√ß√£o'] = main_data['Ocupa√ß√£o (%)'] >= 87.5
        main_data['Atinge Meta Faturabilidade'] = main_data['Faturabilidade (%)'] >= 75.0
        
        # Adicionar colunas com a diferen√ßa para a meta
        main_data['Diferen√ßa para Meta Ocupa√ß√£o'] = main_data['Ocupa√ß√£o (%)'] - 87.5
        main_data['Diferen√ßa para Meta Faturabilidade'] = main_data['Faturabilidade (%)'] - 75.0
        
        # Criar escritor Excel com openpyxl
        from openpyxl import Workbook
        from openpyxl.utils.dataframe import dataframe_to_rows
        from openpyxl.styles import PatternFill, Font, Alignment, Border, Side
        
        # Criar workbook e planilhas
        wb = Workbook()
        ws_resumo = wb.active
        ws_resumo.title = "Resumo"
        ws_dados = wb.create_sheet("Dados Completos")
        
        # Planilha de Resumo
        ws_resumo.append(["M√©trica", "Valor"])
        for i in range(len(resumo_data['M√©trica'])):
            ws_resumo.append([resumo_data['M√©trica'][i], resumo_data['Valor'][i]])
            
        # Adicionar espa√ßo e filtros
        ws_resumo.append([])
        ws_resumo.append([])
        ws_resumo.append(["Filtro", "Valor"])
        ws_resumo.append(["Equipes", teams_str])
        
        # Adicionar informa√ß√µes de pondera√ß√£o se aplic√°vel
        if use_collaborator_filter and collaborator_weights:
            ws_resumo.append([])
            ws_resumo.append(["Informa√ß√µes de Pondera√ß√£o", ""])
            ws_resumo.append(["Colaborador", "Pondera√ß√£o (%)"])
            
            # Obter nomes dos colaboradores para mostrar a pondera√ß√£o
            for colaborador in colaboradores:
                if colaborador['user_id'] in collaborator_weights:
                    ws_resumo.append([colaborador['name'], f"{colaborador['weight_percentage']:.0f}%"])
        
        # Adicionar feriados ao resumo
        ws_resumo.append([])
        ws_resumo.append([])
        ws_resumo.append(["Feriados no Per√≠odo", "Data"])
        
        feriados_no_periodo = [feriado for feriado in all_holidays if start_date.date() <= feriado <= end_date.date()]
        if feriados_no_periodo:
            for feriado in feriados_no_periodo:
                ws_resumo.append(["", feriado.strftime('%d/%m/%Y')])
        else:
            ws_resumo.append(["", "Nenhum feriado no per√≠odo selecionado"])
            
        # Planilha de Dados Completos
        for r in dataframe_to_rows(main_data, index=False, header=True):
            ws_dados.append(r)
            
        # Formatar cabe√ßalhos
        header_fill = PatternFill(start_color="1E77B4", end_color="1E77B4", fill_type="solid")
        header_font = Font(color="FFFFFF", bold=True)
        
        for cell in ws_resumo["1:1"]:
            cell.fill = header_fill
            cell.font = header_font
            
        # Encontrar linha de cabe√ßalho de filtros
        filtro_row = None
        for row_num, row in enumerate(ws_resumo.iter_rows(values_only=True), 1):
            if row[0] == "Filtro":
                filtro_row = row_num
                break
        
        if filtro_row:
            for cell in ws_resumo[f"{filtro_row}:{filtro_row}"]:
                cell.fill = header_fill
                cell.font = header_font
        
        # Encontrar linha de cabe√ßalho de feriados
        feriado_row = None
        for row_num, row in enumerate(ws_resumo.iter_rows(values_only=True), 1):
            if row[0] == "Feriados no Per√≠odo":
                feriado_row = row_num
                break
        
        if feriado_row:
            for cell in ws_resumo[f"{feriado_row}:{feriado_row}"]:
                cell.fill = header_fill
                cell.font = header_font
        
        # Encontrar linha de cabe√ßalho de pondera√ß√£o
        if use_collaborator_filter and collaborator_weights:
            pond_row = None
            for row_num, row in enumerate(ws_resumo.iter_rows(values_only=True), 1):
                if row[0] == "Colaborador" and row[1] == "Pondera√ß√£o (%)":
                    pond_row = row_num
                    break
            
            if pond_row:
                for cell in ws_resumo[f"{pond_row}:{pond_row}"]:
                    cell.fill = header_fill
                    cell.font = header_font
            
        for cell in ws_dados["1:1"]:
            cell.fill = header_fill
            cell.font = header_font
            
        # Adicionar planilhas adicionais conforme necess√°rio
        if show_top_performers and len(df) > 0:
            ws_top = wb.create_sheet("Top Performers")
            
            # Top 5 em ocupa√ß√£o
            top_ocupacao = df.sort_values('occupation_percentage', ascending=False).head(5)
            
            ws_top.append(["Top 5 por Ocupa√ß√£o"])
            
            if use_collaborator_filter and collaborator_weights:
                ws_top.append(["Colaborador", "Ocupa√ß√£o (%)", "Faturabilidade (%)", "Horas Totais", "Pondera√ß√£o (%)"])
            else:
                ws_top.append(["Colaborador", "Ocupa√ß√£o (%)", "Faturabilidade (%)", "Horas Totais"])
            
            for _, row in top_ocupacao.iterrows():
                if use_collaborator_filter and collaborator_weights:
                    ws_top.append([
                        row['name'],
                        row['occupation_percentage'],
                        row['billable_percentage'],
                        row['total_hours'],
                        row['weight_percentage']
                    ])
                else:
                    ws_top.append([
                        row['name'],
                        row['occupation_percentage'],
                        row['billable_percentage'],
                        row['total_hours']
                    ])
                
            # Espa√ßo entre tabelas
            ws_top.append([])
            ws_top.append([])
            
            # Top 5 em faturabilidade
            top_faturabilidade = df.sort_values('billable_percentage', ascending=False).head(5)
            
            ws_top.append(["Top 5 por Faturabilidade"])
            
            if use_collaborator_filter and collaborator_weights:
                ws_top.append(["Colaborador", "Faturabilidade (%)", "Ocupa√ß√£o (%)", "Horas Fatur√°veis", "Pondera√ß√£o (%)"])
            else:
                ws_top.append(["Colaborador", "Faturabilidade (%)", "Ocupa√ß√£o (%)", "Horas Fatur√°veis"])
            
            for _, row in top_faturabilidade.iterrows():
                if use_collaborator_filter and collaborator_weights:
                    ws_top.append([
                        row['name'],
                        row['billable_percentage'],
                        row['occupation_percentage'],
                        row['billable_hours'],
                        row['weight_percentage']
                    ])
                else:
                    ws_top.append([
                        row['name'],
                        row['billable_percentage'],
                        row['occupation_percentage'],
                        row['billable_hours']
                    ])
                
            # Formatar cabe√ßalhos
            for cell in ws_top["2:2"]:  # Cabe√ßalho top ocupa√ß√£o
                cell.fill = header_fill
                cell.font = header_font
                
            # Encontrar linha do segundo cabe√ßalho
            second_header_row = 9 if not (use_collaborator_filter and collaborator_weights) else 9
            for cell in ws_top[f"{second_header_row}:{second_header_row}"]:
                cell.fill = header_fill
                cell.font = header_font
                
        if show_low_performers and len(df) > 0:
            ws_low = wb.create_sheet("Areas de Melhoria")
            
            # Abaixo da meta de ocupa√ß√£o
            below_ocupacao = df[df['occupation_percentage'] < 87.5].sort_values('occupation_percentage')
            
            ws_low.append(["Colaboradores Abaixo da Meta de Ocupa√ß√£o"])
            
            if use_collaborator_filter and collaborator_weights:
                ws_low.append(["Colaborador", "Ocupa√ß√£o (%)", "Faturabilidade (%)", "Diferen√ßa para Meta", "Pondera√ß√£o (%)"])
            else:
                ws_low.append(["Colaborador", "Ocupa√ß√£o (%)", "Faturabilidade (%)", "Diferen√ßa para Meta"])
            
            if not below_ocupacao.empty:
                for _, row in below_ocupacao.iterrows():
                    if use_collaborator_filter and collaborator_weights:
                        ws_low.append([
                            row['name'],
                            row['occupation_percentage'],
                            row['billable_percentage'],
                            row['occupation_percentage'] - 87.5,
                            row['weight_percentage']
                        ])
                    else:
                        ws_low.append([
                            row['name'],
                            row['occupation_percentage'],
                            row['billable_percentage'],
                            row['occupation_percentage'] - 87.5
                        ])
            else:
                ws_low.append(["Todos os colaboradores atingiram a meta de ocupa√ß√£o!"])
                
            # Espa√ßo entre tabelas
            ws_low.append([])
            ws_low.append([])
            
            # Abaixo da meta de faturabilidade
            below_faturabilidade = df[df['billable_percentage'] < 75.0].sort_values('billable_percentage')
            
            ws_low.append(["Colaboradores Abaixo da Meta de Faturabilidade"])
            
            if use_collaborator_filter and collaborator_weights:
                ws_low.append(["Colaborador", "Faturabilidade (%)", "Ocupa√ß√£o (%)", "Diferen√ßa para Meta", "Pondera√ß√£o (%)"])
            else:
                ws_low.append(["Colaborador", "Faturabilidade (%)", "Ocupa√ß√£o (%)", "Diferen√ßa para Meta"])
            
            if not below_faturabilidade.empty:
                for _, row in below_faturabilidade.iterrows():
                    if use_collaborator_filter and collaborator_weights:
                        ws_low.append([
                            row['name'],
                            row['billable_percentage'],
                            row['occupation_percentage'],
                            row['billable_percentage'] - 75.0,
                            row['weight_percentage']
                        ])
                    else:
                        ws_low.append([
                            row['name'],
                            row['billable_percentage'],
                            row['occupation_percentage'],
                            row['billable_percentage'] - 75.0
                        ])
            else:
                ws_low.append(["Todos os colaboradores atingiram a meta de faturabilidade!"])
                
            # Formatar cabe√ßalhos
            for cell in ws_low["2:2"]:  # Cabe√ßalho abaixo meta ocupa√ß√£o
                cell.fill = header_fill
                cell.font = header_font
                
            # Encontrar linha do segundo cabe√ßalho
            fatur_header_row = None
            for row_num, row in enumerate(ws_low.iter_rows(values_only=True), 1):
                if row[0] == "Colaboradores Abaixo da Meta de Faturabilidade":
                    fatur_header_row = row_num + 1
                    break
            
            if fatur_header_row:
                for cell in ws_low[f"{fatur_header_row}:{fatur_header_row}"]:
                    cell.fill = header_fill
                    cell.font = header_font
        
        # Adicionar planilha de detalhes de pondera√ß√£o se aplic√°vel
        if use_collaborator_filter and collaborator_weights:
            ws_pond = wb.create_sheet("Detalhes de Pondera√ß√£o")
            
            ws_pond.append(["Detalhes da Pondera√ß√£o Aplicada"])
            ws_pond.append([])
            ws_pond.append(["Colaborador", "Pondera√ß√£o (%)", "Horas Originais", "Horas Ponderadas", "Horas Fatur. Orig.", "Horas Fatur. Pond."])
            
            for _, row in df.iterrows():
                ws_pond.append([
                    row['name'],
                    row['weight_percentage'],
                    row['total_hours'],
                    row['weighted_total_hours'],
                    row['billable_hours'],
                    row['weighted_billable_hours']
                ])
            
            # Formatar cabe√ßalho
            for cell in ws_pond["3:3"]:
                cell.fill = header_fill
                cell.font = header_font
            
            # Adicionar explica√ß√£o
            ws_pond.append([])
            ws_pond.append(["Explica√ß√£o:"])
            ws_pond.append(["- Horas Originais: Horas realmente trabalhadas pelo colaborador"])
            ws_pond.append(["- Horas Ponderadas: Horas originais √ó fator de pondera√ß√£o"])
            ws_pond.append(["- Os percentuais de ocupa√ß√£o e faturabilidade s√£o calculados com base nas horas ponderadas"])
            ws_pond.append(["- A pondera√ß√£o permite ajustar a contribui√ß√£o de cada colaborador no c√°lculo das m√©dias"])
            
        # Salvar o Excel
        wb.save(output_path)
        logging.info(f"Excel gerado com sucesso: {output_path}")
        return True
    
    except Exception as e:
        import traceback
        error_msg = f"Erro ao gerar Excel: {str(e)}"
        logging.error(error_msg)
        logging.error(traceback.format_exc())
        return False# collaborator_email_report.py